{"version":3,"file":"index.js","mappings":"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","sources":["webpack://simple-custom-block/external window [\"wp\",\"blockEditor\"]","webpack://simple-custom-block/external window [\"wp\",\"blocks\"]","webpack://simple-custom-block/external window [\"wp\",\"components\"]","webpack://simple-custom-block/external window [\"wp\",\"i18n\"]","webpack://simple-custom-block/external window \"React\"","webpack://simple-custom-block/webpack/bootstrap","webpack://simple-custom-block/webpack/runtime/compat get default export","webpack://simple-custom-block/webpack/runtime/define property getters","webpack://simple-custom-block/webpack/runtime/hasOwnProperty shorthand","webpack://simple-custom-block/webpack/runtime/make namespace object","webpack://simple-custom-block/./src/index.js"],"sourcesContent":["module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"i18n\"];","module.exports = window[\"React\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerBlockType } from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\nimport { \n    useBlockProps, \n    RichText, \n    InspectorControls,\n    ColorPalette,\n    PanelColorSettings \n} from '@wordpress/block-editor';\nimport { \n    PanelBody, \n    TextControl, \n    Button,\n    ToggleControl \n} from '@wordpress/components';\n\n\n// Register the block (metadata comes from block.json)\nregisterBlockType('simple-custom-block/hero-section', {\n\n    edit: (props) => {\n        const { attributes, setAttributes } = props;\n        const { title, subtitle, buttonText, buttonUrl, backgroundColor, textColor } = attributes;\n\n        const blockProps = useBlockProps({\n            style: {\n                backgroundColor: backgroundColor,\n                color: textColor,\n                padding: '40px',\n                borderRadius: '8px',\n                textAlign: 'center'\n            }\n        });\n\n        return (\n            <>\n                <InspectorControls>\n                    <PanelBody title={__('Hero Settings', 'simple-custom-block')}>\n                        <TextControl\n                            label={__('Button URL', 'simple-custom-block')}\n                            value={buttonUrl}\n                            onChange={(value) => setAttributes({ buttonUrl: value })}\n                        />\n                    </PanelBody>\n                    \n                    <PanelColorSettings\n                        title={__('Color Settings', 'simple-custom-block')}\n                        colorSettings={[\n                            {\n                                value: backgroundColor,\n                                onChange: (value) => setAttributes({ backgroundColor: value || '#f8f9fa' }),\n                                label: __('Background Color', 'simple-custom-block'),\n                            },\n                            {\n                                value: textColor,\n                                onChange: (value) => setAttributes({ textColor: value || '#333333' }),\n                                label: __('Text Color', 'simple-custom-block'),\n                            }\n                        ]}\n                    />\n                </InspectorControls>\n\n                <div {...blockProps}>\n                    <div className=\"hero-content\">\n                        <RichText\n                            tagName=\"h2\"\n                            className=\"hero-title\"\n                            value={title}\n                            onChange={(value) => setAttributes({ title: value })}\n                            placeholder={__('Enter title...', 'simple-custom-block')}\n                            style={{\n                                fontSize: '2.5rem',\n                                marginBottom: '1rem',\n                                fontWeight: 'bold'\n                            }}\n                        />\n                        \n                        <RichText\n                            tagName=\"p\"\n                            className=\"hero-subtitle\"\n                            value={subtitle}\n                            onChange={(value) => setAttributes({ subtitle: value })}\n                            placeholder={__('Enter subtitle...', 'simple-custom-block')}\n                            style={{\n                                fontSize: '1.2rem',\n                                marginBottom: '2rem',\n                                opacity: 0.8\n                            }}\n                        />\n                        \n                        <RichText\n                            tagName=\"span\"\n                            className=\"hero-button-text\"\n                            value={buttonText}\n                            onChange={(value) => setAttributes({ buttonText: value })}\n                            placeholder={__('Button text...', 'simple-custom-block')}\n                            style={{\n                                display: 'inline-block',\n                                padding: '12px 24px',\n                                backgroundColor: textColor,\n                                color: backgroundColor,\n                                borderRadius: '4px',\n                                textDecoration: 'none',\n                                fontWeight: 'bold',\n                                cursor: 'pointer'\n                            }}\n                        />\n                    </div>\n                </div>\n            </>\n        );\n    },\n\n    save: (props) => {\n        const { attributes } = props;\n        const { title, subtitle, buttonText, buttonUrl, backgroundColor, textColor } = attributes;\n\n        const blockProps = useBlockProps.save({\n            style: {\n                backgroundColor: backgroundColor,\n                color: textColor\n            }\n        });\n\n        return (\n            <div {...blockProps}>\n                <div className=\"hero-content\">\n                    <RichText.Content\n                        tagName=\"h2\"\n                        className=\"hero-title\"\n                        value={title}\n                    />\n                    \n                    <RichText.Content\n                        tagName=\"p\"\n                        className=\"hero-subtitle\"\n                        value={subtitle}\n                    />\n                    \n                    {buttonText && (\n                        <a href={buttonUrl} className=\"hero-button\">\n                            <RichText.Content value={buttonText} />\n                        </a>\n                    )}\n                </div>\n            </div>\n        );\n    },\n});\n"],"names":["registerBlockType","__","useBlockProps","RichText","InspectorControls","ColorPalette","PanelColorSettings","PanelBody","TextControl","Button","ToggleControl","edit","props","attributes","setAttributes","title","subtitle","buttonText","buttonUrl","backgroundColor","textColor","blockProps","style","color","padding","borderRadius","textAlign","createElement","Fragment","label","value","onChange","colorSettings","className","tagName","placeholder","fontSize","marginBottom","fontWeight","opacity","display","textDecoration","cursor","save","Content","href"],"sourceRoot":""}